{"version":3,"sources":["cljss/core.cljs"],"mappings":"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","names":["cljss.core/sheets","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljss.sheet/create-sheet","cljss.core/remove-styles!","cljs.core/deref","cljs.core/run!","cljss.sheet/flush!","cljs.core/reset!","cljss.core/css","cls","static","vars","sheet","cljs.core/first","cljss.sheet/filled?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","G__37783","vec__37784","seq__37785","cljs.core/seq","first__37786","cljs.core/next","vec__37790","seq__37791","first__37792","s","idx","cljss.sheet/insert!","cljs.core/empty?","cljs.core/count","var-cls","cljs.core/hash","cljss.utils/build-css","cljss.core/css-keyframes","inner","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__37793","vec__37794","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","id","val","clojure.string/replace","anim-name","keyframes","cljss.core/-camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__37797","seq__37798","first__37799","first-word","words","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljss.core/-compile-class-name","props","className","cljs.core/select-keys","cljs.core/vals","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljss.core/-mk-var-class","p__37801","vec__37802","v","and__4120__auto__","cljs.core/ifn?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","cljs.core/meta","cljs.core/flatten","p1__37800#","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljss.core/-meta-attrs","cljs.core/second","p1__37807#","cljs.core/set","cljss.core/-camel-case-attrs","cljs.core/reduce-kv","m","G__37809","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljss.core/-styled","attrs","create-element","clsn","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","cljss.utils/dev?","p1__37810#","p__37811","vec__37812","children","vec__37815","cljs.core/map?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/array","var-class","meta-attrs","cljs.core/dissoc","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns cljss.core\n  (:require [cljss.sheet :refer [create-sheet insert! filled? flush!]]\n            [cljss.utils :refer [build-css dev?]]\n            [clojure.string :as cstr]))\n\n(def ^:private sheets (atom (list (create-sheet))))\n\n(defn remove-styles! []\n  (run! flush! @sheets)\n  (reset! sheets (list (create-sheet))))\n\n(defn css\n  \"Takes class name, static styles and dynamic styles.\n   Injects styles and returns a string of generated class names.\"\n  [cls static vars]\n  (let [static (if (string? static) [static] static)\n        sheet (first @sheets)]\n    (if (filled? sheet)\n      (do\n        (swap! sheets conj (create-sheet))\n        (css cls static vars))\n      (do\n        (loop [[s & static] static\n               idx 0]\n          (let [cls (str cls \"-\" idx)]\n            (insert! sheet s cls)\n            (when-not (empty? static)\n              (recur static (inc idx)))))\n        (if (pos? (count vars))\n          (let [var-cls (str \"vars-\" (hash vars))]\n            (insert! sheet #(build-css var-cls vars) var-cls)\n            (str cls \" \" var-cls))\n          cls)))))\n\n(defn css-keyframes\n  \"Takes CSS animation name, static styles and dynamic styles.\n   Injects styles and returns generated CSS animation name.\"\n  [cls static vars]\n  (let [sheet (first @sheets)]\n    (if (filled? sheet)\n      (do\n        (swap! sheets conj (create-sheet))\n        (css-keyframes cls static vars))\n      (let [inner\n            (reduce\n              (fn [s [id val]] (cstr/replace s id val))\n              static\n              vars)\n            anim-name (str \"animation-\" cls \"-\" (hash vars))\n            keyframes (str \"@keyframes \" anim-name \"{\" inner \"}\")]\n        (insert! sheet keyframes anim-name)\n        anim-name))))\n\n;; ==============================\n(defn -camel-case [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (cstr/split (name k) #\"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map cstr/capitalize words)\n            (conj first-word)\n            cstr/join\n            keyword)))\n    k))\n\n(defn -compile-class-name [props]\n  (let [className\n        (-> props\n            (select-keys [:className :class :class-name])\n            vals\n            (->> (filter identity)))]\n    (when-not (empty? className)\n      (str (clojure.string/join \" \" className) \" \"))))\n\n(defn -mk-var-class [props vars cls static]\n  (->> vars\n       (map (fn [[cls v]]\n              (cond\n                (and (ifn? v) (satisfies? IWithMeta v))\n                (->> v meta list flatten (map #(get props % nil)) (apply v) (list cls))\n\n                (ifn? v)\n                (list cls (v props))\n\n                :else (list cls v))))\n       (css cls static)))\n\n(defn -meta-attrs [vars]\n  (->> vars\n       (map second)\n       (filter #(satisfies? IWithMeta %))\n       (map meta)\n       flatten\n       set))\n\n(defn -camel-case-attrs [props]\n  (reduce-kv\n    (fn [m k v]\n      (let [k (case k\n                :for :htmlFor\n                (-camel-case k))]\n        (assoc m k v)))\n    {}\n    props))\n\n(defn -styled [cls static vars attrs create-element]\n  (let [clsn (str cls \"-\" (gensym))\n        static (if ^boolean dev?\n                 (map #(cstr/replace % cls clsn) static)\n                 static)\n        vars (if ^boolean dev?\n               (->> vars (map (fn [[k v]] [(cstr/replace k cls clsn) v])))\n               vars)\n        cls (if ^boolean dev? clsn cls)]\n    (fn [props & children]\n      (let [[props children] (if (map? props)\n                               (array props children)\n                               (array {} (apply array props children)))\n            var-class (-mk-var-class props vars cls static)\n            meta-attrs (-meta-attrs vars)\n            className (str (-compile-class-name props) var-class)\n            props (-> (apply dissoc props (concat attrs meta-attrs [:class :class-name :className]))\n                      (assoc :className className)\n                      -camel-case-attrs)]\n        (create-element props children)))))\n"]}