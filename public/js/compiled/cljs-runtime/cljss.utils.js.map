{"version":3,"sources":["cljss/utils.cljc"],"mappings":";;;AAGS,AAAKA,AAAcC;AAE5B,AAAA,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAgBG;AAAhB,AAAAF,AAAAD,AAAA,AAAA,AAAqBI;AAArB,AACE,AAAAC,AAAK,AAAA,AAACC,AAAmB,AAACC,AAAKJ;AAA/B,AAAA,AAAAE;AACK,AAACG,AAAKJ;;AADXC;;;AAGF,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAAgBP;AAAhB,AAAAF,AAAAS,AAAA,AAAA,AAAqBN;AAArB,AACE,AAAK,AAASD,AACT,AAACK,AAAKJ;;AAEb,AAAA,AAAMQ,AAAUC;AAAhB,AACE,AAAI,AAASA,AAAG,AAASA;;AAE3B,AAAA,AAAMC,AAAYX,AAAKY;AAAvB,AACE,AAAI,AAAA,AAACC,AAAEb;AACL,AAACc,AAAOF;;AACRA;;;AAEJ,AAAA,AAAMG,AAAWC,AAAIC;AAArB,AAEO,AAACC,AAAI,AAAAC,AACL,AAAA,AAACE,AACD,AAAAC;AAFK,AAAA,AAAAF,AAAAD;AAAA,AAAArB,AAAAsB,AAAA,AAAA,AAAMpB;AAAN,AAAAF,AAAAsB,AAAA,AAAA,AAAWR;AAAX,AAAiB,AAAA,AAAA,AAAK,AAACR,AAAKJ,AAAU,AAACW,AAAWX,AAAKY;AAD5DK;AAGAM,AAAA;AAAAC;AAAA,AAAE,AAAA,AAAA,AAAAA,AAAA,AAASR;;;AAAX,AAAA,AAAAO,AAAAD;;AAEP,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAA3B,AAAA4B,AAAA,AAAA,AAAyB1B;AAAzB,AAAAF,AAAA4B,AAAA,AAAA,AAA8Bd;AAA9B,AACE,AAAA,AAAMgB,AAAG,AAAA,AAAK,AAACxB,AAAKJ;AACd4B,AAAE,AAAI,AAACC,AAAQjB,AACX,AAACkB,AAAKF,AAAEhB,AACR,AAACmB,AAAKH,AAAEhB;AAHlB,AAIE,AAAA,AAACmB,AAAKH;;AAEV,AAAA,AAAMI,AAAYC;AAAlB,AACE,AACK,AAACC,AACC,AAAKD,AAAEE,AAOTO;AAPE,AACE,AAAMN,AAAG,AAACC,AAAMJ;AACVK,AAAM,AAACC,AAAKN;AADlB,AAEE,AAAI,AAAK,AAACxB,AAAS0B,AAAI,AAASC;AAC9B,AAACI,AAAK,AAAKJ,AAAGD,AAAIG;;AAClB,AAACE,AAAKL,AAAGF;;AAPjBA,AAQE,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAA","names":["cljss.utils/dev?","js/goog.DEBUG","p__37751","vec__37752","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljss.utils/pseudo?","rule","value","and__4120__auto__","cljs.core/re-matches","cljs.core/name","cljs.core/map?","p__37755","vec__37756","cljss.utils/nested?","cljss.utils/literal?","x","cljss.utils/escape-val","val","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljss.utils/build-css","cls","styles","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__37762","vec__37763","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__37761","fexpr__37760","p1__37759#","p__37766","vec__37767","cljss.utils/compile-css-rule","r","cljs.core/vector?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljss.utils/reduce-str","s","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s1","s0","cljs.core/first","srest","cljs.core/rest","cljs.core/cons","cljs.core/List","cljs.core/reverse"],"sourcesContent":["(ns cljss.utils\n  (:require [clojure.string :as cstr]))\n\n#?(:cljs (def dev? ^boolean goog.DEBUG))\n\n(defn pseudo? [[rule value]]\n  (and (re-matches #\"&:.*\" (name rule))\n       (map? value)))\n\n(defn nested? [[rule value]]\n  (and (string? rule)\n       (map? value)))\n\n(defn literal? [x]\n  (or (string? x) (number? x)))\n\n(defn escape-val [rule val]\n  (if (= rule :content)\n    (pr-str val)\n    val))\n\n(defn build-css [cls styles]\n  (->> styles\n       (map (fn [[rule val]] (str (name rule) \":\" (escape-val rule val) \";\")))\n       (cstr/join \"\")\n       (#(str \".\" cls \"{\" % \"}\"))))\n\n(defn compile-css-rule [[rule val]]\n  (let [r [(str (name rule) \":\")]\n        r (if (vector? val)\n            (into r val)\n            (conj r val))]\n    (conj r \";\")))\n\n(defn reduce-str [s]\n  (->> s\n       (reduce\n         (fn [s s1]\n           (let [s0 (first s)\n                 srest (rest s)]\n             (if (and (literal? s1) (string? s0))\n               (cons (str s0 s1) srest)\n               (cons s1 s))))\n         (list \"\"))\n       reverse))\n\n#?(:clj\n   (defn resolve-get\n     \"Tries to resolve a var and get its value. Returns the symbol if failed.\"\n     [sym]\n     (try\n       (var-get (resolve sym))\n       (catch Exception e\n         sym))))\n"]}