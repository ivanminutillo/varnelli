{"version":3,"sources":["varnelli/core.cljs"],"mappings":";;;;;;;AASA,AAAA,AAAKA;AACL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACC;;AAEpB,AAAKC,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD;AAEZ,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAU,AAAA,AAAKR;;AAUlB,AAAA,AAAMS;AAAN,AACE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA;AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAwBV;AAAxBQ,AAAAA;AAAA,AAAA,AAAAG,AAAAH,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAK,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AACOiB;AADPtB,AAAAA;AAAA,AAAA,AAAAO,AAAAP,AAAAM;;AAAA;;;;;AAAA,AAAA;;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAR;;AAAA,AAAA,AAAAU,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAZ,AAAAC;AAAA,AAAA,AAAA,AAAAY,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAD;;AAAAC;AAAA,AAAAC,AAAAjB;;AAAA;;AAAA,AAAA,AAAAa;;;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAV;;;;AAAAU;;;;;AAAAV;;;;;AAAAA;;;;;;;;;;AAAAkB,AAAA,AAAAC,AAAA,AAAArB,AAAAA,AAAAA;AAAA,AAAA,AAAAqB,AAAAC,AAAA,AAAAzB;;AAAAwB;;AAAA,AAAA,AAAAE,AAAAH;;;;AAAAvB;AADF,AAAA,AAAA,AAAA,AAII4B,AACAC;;AAGJ,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAA,AAA2BhC;AAA3BiC,AAC0B,AAAA,AAAGE;AAD7B,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAGH,AAAA,AAAeE;AAAf,AAIE,AAACL;;;AAEH,AAAA,AAAMM;AAAN,AAGE,AAAA,AAACT","names":["varnelli.core/url","js/varnelli","js/varnelli.core","js/varnelli.core.app-state","varnelli.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","varnelli.core/items","varnelli.core/fetch-txs","cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic","varnelli.core/app","c__25649__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25650__auto__","switch__25604__auto__","state_28102","state_val_28103","inst_28096","cljs.core.async.impl.ioc-helpers/take!","inst_28098","inst_28099","inst_28100","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28104","state-machine__25605__auto__","ret-value__25606__auto__","result__25607__auto__","cljs.core/keyword-identical?","e28105","js/Object","ex__25608__auto__","statearr-28106","cljs.core.async.impl.ioc-helpers/process-exception","state__25651__auto__","statearr-28107","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/console.log","varnelli.components.header/header","varnelli.components.txs/txs","varnelli.core/start","G__28108","G__28109","reagent.core/render-component","js/document","varnelli.core/init","varnelli.core/stop"],"sourcesContent":["(ns varnelli.core\n   (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [reagent.core :as reagent :refer [atom]]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [varnelli.components.header :refer [header]]\n            [varnelli.components.txs :refer [txs]]))\n\n;; define your app data so that it doesn't get over-written on reload\n(def url \"http://localhost:3000/wallet/v1/\")\n(defonce app-state (atom {:text \"Hello world!\"}))\n\n(def items (reagent/atom [{:amount \"3\" :currency \"santamaria\"} {:amount \"6\" :currency \"santamaria\"}])) \n\n(defn fetch-txs []              \n  (http/post (str url \"transactions/list\")\n              {:with-credentials? false\n               :as :json\n               :json-params {:type \"db-only\"\n                             :connection    \"mongo\"}\n               :headers {\"x-api-key\" \"K8trtGu8FmfNiOFqcZhJhgtxhqs5FluM\"\n                         \"Content-Type\" \"application/json\"\n                         \"Accept\" \"application/json\"}\n               }))\n\n(defn app []\n  (go (let [response (<! (fetch-txs))]\n        (js/console.log (:body response))))\n  [:div\n   [header]\n   [txs]]\n  )\n\n(defn start []\n  (reagent/render-component [app]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}