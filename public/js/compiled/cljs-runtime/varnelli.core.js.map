{"version":3,"sources":["varnelli/core.cljs"],"mappings":";;;;;;;;;AASA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAACC;;AAEhB,AAAA,AAAMC;AAAN,AACE;AAAA,AACE,AAAMC,AAAK,AAAA,AAAe,AAAA,AAACC;AAA3B,AAAA,AAAA,AAAA,AAAA,AAEIC,AACAF;;;AAGR,AAAA,AAAMG;AAAN,AACE,AAAA,AAACC,AAAUL,AACS,AAAA,AAAGM;;AAEzB,AAAA,AAAeC;AAAf,AAIE,AAACC;;AACD,AAAA,AAAA,AAACC,AAEC,AAAKC;AAAL,AACE,AAAMC,AAAM,AAACC,AAAqBC,AAAOH;AACnCI,AAAa,AAAA,AAAO,AAAA,AAAQH;AAC5BI,AAAa,AAAA,AAAcJ;AAFjC,AAGE,AAACK,AAAeC;;AAChB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAmC,AAACC,AAASL,AACVC;;AACpC,AAACK,AAAqBV;AAT5B,AAYE,AAAKA;AAAL,AACE,AAACW,AAAQ,AAACT,AAAqBC,AAAOH;;;AAC1C,AAACY;;AACD,AAAClB;;;AAEH,AAAA,AAAMmB;AAAN,AAGE,AAAA,AAACC","names":["js/varnelli","js/varnelli.core","js/varnelli.core.match","varnelli.core/match","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","varnelli.core/current-page","page","reagent.session/get","varnelli.components.header/header","varnelli.core/start","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","varnelli.core/init","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","varnelli.routes/router","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","varnelli.routes/page-for","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","varnelli.core/stop","js/console.log"],"sourcesContent":["(ns varnelli.core\n  (:require [reagent.core :as r :refer [atom]]\n            [reitit.frontend :as reitit]\n            [reagent.session :as session]\n            [clerk.core :as clerk]\n            [accountant.core :as accountant]\n            [varnelli.components.header :refer [header]]\n            [varnelli.routes :refer [router page-for]]))\n\n(defonce match (r/atom nil))\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [:div\n       [header]\n       [page]])))\n\n\n(defn start []\n  (r/render [current-page]\n                      (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (r/after-render clerk/after-render!)\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)\n        ))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}