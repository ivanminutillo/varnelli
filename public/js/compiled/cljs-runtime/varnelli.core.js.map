{"version":3,"sources":["varnelli/core.cljs"],"mappings":";;;;;AAOA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACC;;AACpB,AAAA,AAAMC,AAASC;AAAf,AACE,AAAMC,AAAW,AAAKD;;AAExB,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA6BM;AAA7B,AAAAF,AAAAJ,AAAA,AAAoCO;AAApC,AACE,AAAMT,AAAW,AAAA,AAAA,AAAgCQ,AAAWC;;AAE9D,AAAA,AAAMC,AACHC;AADH,AAEE,AAAYC,AAAQ,AAACC,AAAQF;;AAE/B,AAAA,AAAMG;AAAN,AACE,AAAMC,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAACL;AAAZ,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACM,AAMUD,AACCjB,AACMS;;AAEpB,AAAA,AAAMU;AAAN,AACE,AAACH;;AADH,AAEGI;;AAEH,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAA,AAA2BH;AAA3BI,AAC0B,AAAA,AAAGE;AAD7B,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAGH,AAAA,AAAeE;AAAf,AAIE,AAACL;;;AAEH,AAAA,AAAMM;AAAN,AAGE,AAAA,AAACC","names":["js/varnelli","js/varnelli.core","js/varnelli.core.app-state","varnelli.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","varnelli.core/handler","response","js/console","p__29655","map__29656","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","varnelli.core/error-handler","status","status-text","varnelli.core/clj->json","ds","js/JSON","cljs.core/clj->js","varnelli.core/fetch-txs!","json","ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic","varnelli.core/app","varnelli.components.header/header","varnelli.core/start","G__29658","G__29659","reagent.core/render-component","js/document","varnelli.core/init","varnelli.core/stop","js/console.log"],"sourcesContent":["(ns varnelli.core\n  (:require [reagent.core :as reagent :refer [atom]]\n            [ajax.core :refer [POST]]\n            [varnelli.components.header :refer [header]]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n(defn handler [response]\n  (.log js/console (str response)))\n\n(defn error-handler [{:keys [status status-text]}]\n  (.log js/console (str \"something bad happened: \" status \" \" status-text)))\n\n(defn clj->json\n  [ds]\n  (.stringify js/JSON (clj->js ds)))\n\n(defn fetch-txs! []\n  (let [json (clj->json {:type \"db-only\"\n                              :connection    \"mongo\"})]\n  (POST \"http://localhost:3000/wallet/v1/transactions/list\"\n    {:headers {\"x-api-key\" \"K8trtGu8FmfNiOFqcZhJhgtxhqs5FluM\"\n               \"Content-Type\" \"application/json\"\n               \"Accept\" \"application/json\"\n               }}\n    {:format :json}\n    {:params json\n     :handler handler\n     :error-handler error-handler})))\n\n(defn app []\n  (fetch-txs!)\n  [header])\n\n(defn start []\n  (reagent/render-component [app]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}